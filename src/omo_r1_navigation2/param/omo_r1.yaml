amcl:
  ros__parameters:
    use_sim_time: False
    tf_broadcast: False   

bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    default_bt_xml_filename: "navigate_w_replanning_and_recovery.xml"
    bt_loop_duration: 10
    default_server_timeout: 20
    enable_groot_monitoring: True
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_follow_path_action_bt_node
    #- nav2_back_up_action_bt_node
    #- nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    use_sim_time: False
    controller_frequency: 10.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"]
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.1 # 기존의 값: 0.5, robot know that i have to move at least 10cm 
      movement_time_allowance: 50.0 # 가존의 값: 10.0
    
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      
      #목적지 도착 판정 범위
      xy_goal_tolerance: 0.25 # 목표 도착 시 x-y 평면에서 허용하는 오차 범위(미터) 0.25
      yaw_goal_tolerance: 7.0 # 회전(heading) 오차 0.25

    # DWB parameters
    FollowPath:
      plugin: "nav2_rotation_shim_controller::RotationShimController"
      primary_controller: "dwb_core::DWBLocalPlanner"  
      angular_dist_threshold: 0.785
      forward_sampling_distance: 2.4
      angular_disengage_threshold: 0.3925
      rotate_to_heading_angular_vel: 0.3
      max_angular_accel: 0.3
      simulate_ahead_time: 1.0
      rotate_to_goal_heading: True
    
      debug_trajectory_details: True
      min_vel_x: 0.0 # 로봇의 x축(전진/후진) 최소/최대 속도를 지정
      min_vel_y: 0.0
      max_vel_x: 0.4 # 로봇의 x축(전진/후진) 최소/최대 속도를 지정
      max_vel_y: 0.0
      max_vel_theta: 0.3 # 최대 회전 속도(라디안/초)를 설정/ 기존: 3.4
      min_speed_xy: 0.0
      max_speed_xy: 0.4 #형 가속/감속 한계로, 값을 높이면 더 빠른 속도 변화가 가능해집니다. # x-y 평면에서의 최대 선형 속도를 제한
      min_speed_theta: 0.0
      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      acc_lim_x: 0.15 # 선형 가속/감속 한계로, 값을 높이면 더 빠른 속도 변화가 가능해집니다.
      acc_lim_y: 0.0
      acc_lim_theta: 0.4 # 회전 가속 제한
      decel_lim_x: -0.15 # 선형 가속/감속 한계로, 값을 높이면 더 빠른 속도 변화가 가능해집니다.
      decel_lim_y: 0.0
      decel_lim_theta: -0.4 # 회전 감속 제한
      vx_samples: 20
      vy_samples: 5
      vtheta_samples: 20
      sim_time: 1.0
      linear_granularity: 50.0 # 체크 포인트(경로 포인트) 간격 기존 0.05
      angular_granularity: 0.05
      transform_tolerance: 0.1 #0.2
      xy_goal_tolerance: 0.20 # 기존: 0.05
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics: ["ObstacleFootprint", "RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"] # "RotateToGoal" 일단 제거
      ObstacleFootprint:
        plugin: "dwb_critics::ObstacleFootprintCritic"
        scale: 1.0
      BaseObstacle.scale: 0.02
      PathAlign.scale: 20.0
      PathAlign.forward_point_distance: 1.2 #0.85
      GoalAlign.scale: 16.0
      GoalAlign.forward_point_distance: 0.7 #0.55
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal: 32.0
        # scale: 10.0 # 회전에 대한 영향 감소/ 기존 값: 32.0
        # slowing_factor: 8.0 # 회전 시 서서히 감속하도록 조정
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 10.0
      publish_frequency: 5.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: True
      robot_radius: 0.4 # 0.5
      resolution: 0.1
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]   

      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"

        enabled: true  # 장애물 레이어 사용 여부
        footprint_clearing_enabled: false  # 로봇 발 밑 장애물 제거
        combination_method: 1  # 0: 덮어쓰기, 1: 최대값 사용, 2: unknown만 덮기

        observation_sources: scan  # 사용 센서 이름 (공백 없이 나열)
        
        scan:
          topic: /scan  # 센서 데이터 토픽 이름
          sensor_frame: lidar_link  # 비워두면 메시지에서 frame_id 사용
          observation_persistence: 0.0  # 센서 데이터 유지 시간 (s)
          expected_update_rate: 10.0  # 예상 갱신 주기 (s)
          data_type: "LaserScan"  # LaserScan 또는 PointCloud2

          min_obstacle_height: 0.0  # 최소 장애물 높이
          max_obstacle_height: 10.0  # 최대 장애물 높이

          ###### Try point!!!!!!!
          inf_is_valid: False  # inf 값을 유효한 거리로 인정할지
          marking: True  # 장애물로 마킹할지
          clearing: False  # 자유 공간으로 클리어할지

          obstacle_max_range: 3.0  # 장애물 마킹 최대 거리
          obstacle_min_range: 0.0  # 장애물 마킹 최소 거리

          raytrace_max_range: 0.0  # 레이 트레이싱 최대 거리 (자유 공간 탐색)
          raytrace_min_range: 0.0  # 레이 트레이싱 최소 거리

      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 2.0
        inflation_radius: 1.8 # 0.3
      always_send_full_costmap: True
  global_costmap_client:
    ros__parameters:
      use_sim_time: False
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

map_server:
  ros__parameters:
    use_sim_time: False
    yaml_filename: "map.yaml"

map_saver:
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5000
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    planner_plugins: ["GridBased"]

    GridBased:
      plugin: "nav2_smac_planner/SmacPlanner2D"
      tolerance: 0.5                      # tolerance for planning if unable to reach exact pose, in meters
      downsample_costmap: true           # whether or not to downsample the map
      downsampling_factor: 3              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      allow_unknown: false                # allow traveling in unknown space
      max_iterations: 1000000             # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      max_on_approach_iterations: 1000    # maximum number of iterations to attempt to reach goal once in tolerance
      terminal_checking_interval: 5000     # number of iterations between checking if the goal has been cancelled or planner timed out
      max_planning_time: 3.5              # max time in s for planner to plan, smooth, and upsample. Will scale maximum smoothing and upsampling times based on remaining time after planning.
      motion_model_for_search: "DUBIN"    # For Hybrid Dubin, Reeds-Shepp

      # ----- [중요] 장애물 근처를 회피하도록 가중을 높임 -----
      cost_travel_multiplier: 3.0       # (수정) 장애물 인근 비용을 더 크게 부여
      cost_penalty: 3.0                # (수정) Hybrid/Dubin 등에서 장애물 비용 반영
      # ------------------------------------
      
      angle_quantization_bins: 64         # For Hybrid nodes: Number of angle bins for search, must be 1 for 2D node (no angle search)
      analytic_expansion_ratio: 3.5       # For Hybrid/Lattice nodes: The ratio to attempt analytic expansions during search for final approach.
      analytic_expansion_max_length: 3.0    # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting (in meters). This should be scaled with minimum turning radius and be no less than 4-5x the minimum radius
      analytic_expansion_max_cost: 200   # For Hybrid/Lattice nodes: The maximum single cost for any part of an analytic expansion to contain and be valid (except when necessary on approach to goal)
      analytic_expansion_max_cost_override: false # For Hybrid/Lattice nodes: Whether or not to override the maximum cost setting if within critical distance to goal (ie probably required). If expansion is within 2*pi*min_r of the goal, then it will override the max cost if `false.
      minimum_turning_radius: 0.40        # For Hybrid/Lattice nodes: minimum turning radius in m of path / vehicle
      reverse_penalty: 2.1                # For Reeds-Shepp model: penalty to apply if motion is reversing, must be => 1
      change_penalty: 0.0                 # For Hybrid nodes: penalty to apply if motion is changing directions, must be >= 0
      non_straight_penalty: 1.20          # For Hybrid nodes: penalty to apply if motion is non-straight, must be => 1
      
      retrospective_penalty: 0.025        # For Hybrid/Lattice nodes: penalty to prefer later maneuvers before earlier along the path. Saves search time since earlier nodes are not expanded until it is necessary. Must be >= 0.0 and <= 1.0
      rotation_penalty: 5.0               # For Lattice node: Penalty to apply only to pure rotate in place commands when using minimum control sets containing rotate in place primitives. This should always be set sufficiently high to weight against this action unless strictly necessary for obstacle avoidance or there may be frequent discontinuities in the plan where it requests the robot to rotate in place to short-cut an otherwise smooth path for marginal path distance savings.
      lookup_table_size: 20.0               # For Hybrid nodes: Size of the dubin/reeds-sheep distance window to cache, in meters.
      cache_obstacle_heuristic: True      # For Hybrid nodes: Cache the obstacle map dynamic programming distance expansion heuristic between subsequent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
      allow_reverse_expansion: False      # For Lattice nodes: Whether to expand state lattice graph in forward primitives or reverse as well, will double the branching factor at each step.
      smooth_path: True                   # For Lattice/Hybrid nodes: Whether or not to smooth the path, always true for 2D nodes.
      debug_visualizations: True                # For Hybrid/Lattice nodes: Whether to publish expansions on the /expansions topic as an array of poses (the orientation has no meaning) and the path's footprints on the /planned_footprints topic. WARNING: heavy to compute and to display, for debug only as it degrades the performance.
      smoother:
        max_iterations: 1500 # 1500~2000
        w_smooth: 0.7 # 0.5~0.7
        w_data: 0.1  # 0.1~0.15
        tolerance: 1.0e-1
        do_refinement: true               # Whether to recursively run the smoother 3 times on the results from prior runs to refine the results further


# planner_server:
#  ros__parameters:
#    expected_planner_frequency: 20.0
#    use_sim_time: False
#    planner_plugins: ["GridBased"]
#    GridBased:
#      plugin: "nav2_navfn_planner/NavfnPlanner"
#      tolerance: 0.5
#      use_astar: false
#      allow_unknown: true


planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

recoveries_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    recovery_plugins: ["wait"] # "spin", "backup",
    
    #spin:
    #  plugin: "nav2_recoveries/Spin"
    #backup:
    #  plugin: "nav2_recoveries/BackUp"
    
    wait:
      plugin: "nav2_recoveries/Wait"
    global_frame: odom
    robot_base_frame: base_link
    transform_timeout: 0.1
    use_sim_time: True
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 1.0 #3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: False

waypoint_follower:
  ros__parameters:
    loop_rate: 2000
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"   
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200